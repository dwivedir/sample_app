
Implementation:-

here in the implementation the main commented codes of the controllers and models are described:
User's controller:-

class UsersController < ApplicationController

  before_filter :authenticate , :only => [:index, :edit, :update]
  before_filter :correct_user,  :only => [:edit, :update]

  def index    # for listing all the users
    @users = User.all
    @title = "All users"
  end

  def new      # for providing page to create user
    @user = User.new
    @title="Sign up"
  end
  
  def show     # for showing any user's profile page
    @user = User.find(params[:id])
    @title = @user.name
  end

  def create   # for creating new users
    @user = User.new(user_params)
    if @user.save
      log_in @user
      Dir.mkdir "public/data/#{@user.id}"
      flash[:success] = "Welcome to the sample App"
      redirect_to @user
    else
      @title = "Sign up"
      render 'new'
    end
  end

  def edit
    @user = User.find(params[:id]) 
    @title = "Edit User"
  end

  def update
    @user = User.find(params[:id])
    if @user.update_attributes(user_params)
      redirect_to @user, :flash => { :success => "Profile updated" }
    else
      @title = "Edit User"
      render 'edit'
    end
  end

  


private

  def user_params
    params.require(:user).permit(:name, :email, :password, :password_confirmation)
  end


# for authentication purpose 
  def correct_user
    @user = User.find(params[:id])
    redirect_to(root_path) unless correct_user?(@user)
  end
end



Another controller is for file management and related features:

class StoresController < ApplicationController
  
  before_filter :authenticate ,   :only => [:index, :show]
  before_filter :access_to_file,  :only => [:show]
  
  def index
    @store = Store.new
  end

  def show
    @store = Store.find(params[:id])
    @user  = User.find(@store.user_id)
  end

  def upload

    Store.save(params[:store])
    @store = Store.new(:name        => params[:store]['file'].original_filename.downcase, 
                       :user_id     => params[:store]['user_id'],
                       :private     => params[:store]['private'])
    @store.save
    flash[:success] = "File has been uploaded"
    redirect_to upload_path
  end

  private

  def access_to_file
    store = Store.find(params[:id])
    if store.private && current_user.id != store.user_id
      redirect_to current_user, :flash => { :notice => "sorry, that was a private file"}
    end
  end

end

code for implementing the search feature:

class EngineController < ApplicationController
  def index
    @key_word = "write the keywords"
    @results = []
  end

  def search
    @key_word = params[:key_word][:key].downcase
    @results  = []
    keys = @key_word.split
    Store.all.each do |store|
      keys.each do |key|
        if store.name.include? key
          @results.push(store)
          break
        end
      end
    end
    render 'index'
  end

end








Now the code contains the two models which I have used for Users and files:

Store Model:

class Store < ActiveRecord::Base
  has_many :hash_words
  belongs_to :user

  def self.save(upload)
    file_name = upload['file'].original_filename.downcase
    user_id = upload['user_id']
    directory = "#{Rails.root}/public/data/#{user_id}"
    path = File.join(directory, file_name)
    File.open(path, "wb") do |f|
      f.write(upload['file'].read)
    end
  end

end










User Model:
class User < ActiveRecord::Base

  has_many :stores  
  attr_accessor  :password 
 
  email_regex = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i 
  validates :name,  :presence => true,
                    :length   => { :maximum => 50 }
  validates :email, :presence => true,
                    :format   => {:with => email_regex },
                    :uniqueness => { :case_sensitive => false }
  validates :password, :presence => true,
                       :confirmation => true,
                       :length => { :within => 6..40 }
  before_save :encrypt_password

  def User.authenticate(email, submitted_password)
     user = find_by_email(email)
     (user && user.has_password?(submitted_password)) ? user : nil
  end

  def User.authenticate_with_salt(id, cookie_salt)
    user = find_by_id(id)
    (user && user.salt == cookie_salt) ? user : nil
  end

  def has_password?(submitted_password)
     encrypted_password == encrypt(submitted_password)
  end  
  private

  def encrypt_password
     self.salt = make_salt if new_record?
     self.encrypted_password = encrypt(self.password)
  end


  def encrypt(string)
     secure_hash("#{salt}--#{string}")
  end

  def make_salt
    secure_hash("#{Time.now.utc}--#{password}")
  end

  def secure_hash(string)
    Digest::SHA2.hexdigest(string)
  end
end

